"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runStepWithLogGroup = void 0;
const error_1 = require("./error");
const ensureChain = (value) => Cypress.isCy(value) ? value : cy.wrap(value, { log: false });
// eslint-disable-next-line @typescript-eslint/no-empty-function
const nativePromiseConstructor = (async () => { })().constructor;
function runStepWithLogGroup(options) {
    Cypress.log({
        name: options.keyword,
        message: options.text == null ? "" : `**${options.text}**`,
        groupStart: true,
    });
    const ret = options.fn();
    if (ret instanceof nativePromiseConstructor) {
        throw new error_1.CypressCucumberError("Cucumber preprocessor detected that you returned a native promise from a function handler, this is not supported. Using async / await is generally speaking not supported when using Cypress, period, preprocessor or not.");
    }
    return ensureChain(ret).then((result) => {
        Cypress.log({ groupEnd: true, emitOnly: true });
        return result;
    });
}
exports.runStepWithLogGroup = runStepWithLogGroup;
